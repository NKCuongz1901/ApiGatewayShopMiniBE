import {
  Injectable,
  CanActivate,
  ExecutionContext,
  HttpException,
  HttpStatus,
} from '@nestjs/common';
import { Reflector } from '@nestjs/core';
import { RateLimiterRedis } from 'rate-limiter-flexible';
import  Redis from 'ioredis';

@Injectable()
export class CustomRateLimiterGuard implements CanActivate {
  private rateLimiter: RateLimiterRedis;

  constructor(private readonly reflector: Reflector) {
    // Kh·ªüi t·∫°o Redis client v√† RateLimiterRedis
    const redis = new Redis({
      host: 'localhost', // ho·∫∑c k·∫øt n·ªëi v·ªõi Redis cluster n·∫øu c·∫ßn
      port: 6379, // Port Redis
    });
    redis.on('connect', () => console.log('‚úÖ Redis connected'));
    redis.on('error', (err) => console.error('‚ùå Redis error:', err));

    this.rateLimiter = new RateLimiterRedis({
      storeClient: redis,
      points: 10, // cho ph√©p 10 request
      duration: 60, // trong 60 gi√¢y
      keyPrefix: 'rate-limit', // ƒë·ªãnh danh cho Redis key
    });
  }

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const req = context.switchToHttp().getRequest();
    const ip = req.ip; // s·ª≠ d·ª•ng IP l√†m key l∆∞u tr·ªØ

    try {
      await this.rateLimiter.consume(ip); // ki·ªÉm tra gi·ªõi h·∫°n rate
      return true;
    } catch (err) {
      const retrySecs = Math.round(err.msBeforeNext / 1000) || 60;
      throw new HttpException(
        {
          statusCode: HttpStatus.TOO_MANY_REQUESTS,
          message: `üö´ Qu√° nhi·ªÅu y√™u c·∫ßu! Vui l√≤ng th·ª≠ l·∫°i sau ${retrySecs} gi√¢y.`,
          error: 'Too Many Requests',
        },
        HttpStatus.TOO_MANY_REQUESTS,
      );
    }
  }
}
